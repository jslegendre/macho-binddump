import unittest
import struct
import importlib
import cffi
    
ffi = cffi.FFI()

def load(filename):
    # load source code
    source = open(filename + '.c').read()
    includes = open(filename + '.h').read()
    
    # pass source code to CFFI
    ffibuilder = cffi.FFI()
    ffibuilder.cdef(includes)
    ffibuilder.set_source(filename + '_', source)
    ffibuilder.compile()
    
    # import and return resulting module
    module = importlib.import_module(filename + '_')
    return module.lib

class mask_opcode(unittest.TestCase):
    def test_17(self):
        self.assertEqual(module.mask_opcode(17), 16)

    def test_79(self):
        self.assertEqual(module.mask_opcode(79), 64)

class bitflip(unittest.TestCase):
    def test_swap(self):
        input = ffi.cast("uint32_t", 12585216)
        should = ffi.cast("uint32_t", 638976)
        self.assertEqual(module.bitflip(input), should)

class get_dyld_index(unittest.TestCase):

    def test_x10(self):
        sym = ffi.new("unsigned char[]", '\x17\x40')
        self.assertEqual(module.get_dyld_index(sym), 7)

    def test_x20(self):
        sym = ffi.new("unsigned char[]", '\x90\x20\x1B\x40')
        self.assertEqual(module.get_dyld_index(sym), 27)

    def test_0x70(self):
        sym = ffi.new("unsigned char[]", '\x72\xC0\x1E\x1C\x40\x5F\x5F\x5A\x4E')
        self.assertEqual(module.get_dyld_index(sym), 12)

    def test_x90x40(self):
        sym = ffi.new("unsigned char[]", '\x90\x40')
        self.assertEqual(module.get_dyld_index(sym), 0)

    def test_uleb_with_0x40_mask(self):
        sym = ffi.new("unsigned char[]", '\x80\xB8\x92\xFE\xFF\xFF\xFF\xFF\xFF\xFF\x01\xA0\xE8\x42\x90\x40\x5F\x4F\x42\x4A\x43\x5F\x43\x4C')
        module.get_dyld_index(sym)
        self.assertEqual(module.get_dyld_index(sym), 0)

    def test_uleb_with_0x40(self):
        sym = ffi.new("unsigned char[]", '\x80\xB0\xE8\xEF\xFF\xFF\xFF\xFF\xFF\xFF\x01\xA0\xA8\x92\x10\xA0\x88\xCB\x01\xA0\xE8\x29\xA0\xD8\x03\xA0\xE8\x1F\xA0\xD0\x0E\xA0\xA0\x05\xA0\xD8\x1C\xA0\x98\x15\xA0\xF8\x40\x90\x40\x5F\x4F\x42\x4A\x43\x5F\x43')
        module.get_dyld_index(sym)
        self.assertEqual(module.get_dyld_index(sym), 0)

class get_sym_name(unittest.TestCase):

    def test_with_uleb(self):
        sym = ffi.new("unsigned char[]", '\x80\xA0\xA7\xFE\xFF\xFF\xFF\xFF\xFF\xFF\x01\x90\x40\x5F\x4F\x42\x4A\x43\x5F\x43\x4C\x41\x53\x53\x5F\x24\x5F\x4E\x53\x53\x6C\x69\x64\x65\x72\x43\x65\x6C\x6C')
        sym_name = ffi.new("unsigned char[]", '\x5F\x4F\x42\x4A\x43\x5F\x43\x4C\x41\x53\x53\x5F\x24\x5F\x4E\x53\x53\x6C\x69\x64\x65\x72\x43\x65\x6C\x6C')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_no_uleb(self):
        sym = ffi.new("unsigned char[]", '\x90\x40\x5F\x4E\x53\x41\x63\x63\x65\x73\x73\x69\x62\x69\x6C\x69\x74\x79\x45\x6E\x61\x62\x6C\x65\x64\x41\x74\x74\x72\x69\x62\x75\x74\x65')
        sym_name = ffi.new("unsigned char[]", '\x5F\x4E\x53\x41\x63\x63\x65\x73\x73\x69\x62\x69\x6C\x69\x74\x79\x45\x6E\x61\x62\x6C\x65\x64\x41\x74\x74\x72\x69\x62\x75\x74\x65')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_uleb_with_0x40_mask(self):
        sym = ffi.new("unsigned char[]", '\x80\xB8\x92\xFE\xFF\xFF\xFF\xFF\xFF\xFF\x01\xA0\xE8\x42\x90\x40\x5F\x4F\x42\x4A\x43\x5F\x43\x4C')
        sym_name = ffi.new("unsigned char[]", '\x5F\x4F\x42\x4A\x43\x5F\x43\x4C')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_0x20(self):
        sym = ffi.new("unsigned char[]", '\x80\xE8\xFB\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x01\xA0\xE8\x04\x90\x20\x13\x40\x5F\x5F\x5A\x4E\x4B\x53\x74\x31\x33\x72\x75\x6E\x74\x69\x6D\x65\x5F\x65\x72\x72\x6F\x72\x34\x77\x68\x61\x74\x45\x76')
        sym_name = ffi.new("unsigned char[]", '\x5F\x5F\x5A\x4E\x4B\x53\x74\x31\x33\x72\x75\x6E\x74\x69\x6D\x65\x5F\x65\x72\x72\x6F\x72\x34\x77\x68\x61\x74\x45\x76')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_huge(self):
        sym = ffi.new("unsigned char[]", '\x80\xA8\xFA\xDE\xFE\xFF\xFF\xFF\xFF\xFF\x01\xA0\xF8\x13\xA0\xB8\x1C\xB9\xA0\x98\x17\xA0\xF8\x36\xA0\x78\xB9\xA0\x88\x08\xA0\xE8\x21\xA0\xF8\x13\xA0\x88\x17\xA0\x98\x06\xC0\x02\x48\xA0\xC8\x17\xA0\xD8\x18\xA0\xE8\x06\xB9\xA0\xE8\x0A\xA0\xA8\x03\xA0\xF8\x24\xA0\xB8\x03\xA0\xA8\x0A\xA0\xF8\x07\xA0\x98\x41\xA0\xB8\x40\xA0\xD8\x30\xB9\xA0\x88\x06\xBD\xA0\x98\x01\xBD\xC0\x03\x48\xBD\xB9\xA0\xF8\x02\xA0\x78\xA0\x98\x01\xA0\xB8\x04\xB9\xA0\xD8\x01\xA0\xF8\x05\xA0\xE8\x30\xA0\xA8\x23\xA0\xE8\x19\xA0\x88\x1A\xA0\xF8\x22\xA0\xE8\x04\xB9\xA0\xB8\x18\xA0\xF8\x15\xA0\xD8\x1C\xB3\xA0\xC8\x07\xA0\x88\x03\xA0\xA8\x23\xA0\xB8\x04\xA0\xB8\x01\xA0\x98\x23\xA0\xC8\x21\xA0\xC8\x02\xB9\xA0\xF8\x02\xA0\x98\x17\xA0\xF8\x21\xB9\xA0\xC8\x19\xA0\xD8\x25\xB9\xA0\xF8\x07\xA0\x88\x02\xA0\x98\x06\xC0\x02\x48\xA0\xC8\x03\xA0\xB8\x45\xC0\x02\x48\xA0\x88\x39\xB9\xA0\xF8\x04\xA0\xF8\x22\xA0\x98\x06\xA0\x98\x18\xA0\x88\x01\xA0\xC8\x03\xA0\xD8\x16\xB9\xA0\xD8\x01\xA0\xC8\x0E\xA0\x98\x02\xC0\x02\x48\xA0\x98\x03\xB9\xA0\xB8\x01\xA0\x98\x03\xA0\xD8\x03\xA0\xA8\x19\xA0\xE8\x0B\xC0\x04\x48\xA0\x88\x02\xA0\xF8\x05\xB9\xA0\xE8\x02\xA0\x88\x07\xA0\xA8\x07\xA0\x98\x0B\xA0\x88\x05\xA0\x88\x27\xA0\xD8\x0B\xA0\xF8\x46\xA0\x88\x0B\xA0\xA8\x09\xBD\xA0\x88\x02\xA0\xA8\x06\xA0\xA8\x09\xA0\xF8\x05\xA0\x98\x01\xA0\xD8\x01\xA0\xA8\x1A\xA0\xC8\x0D\xA0\xC8\x05\xA0\xF8\x15\xA0\x98\x0A\xB9\xA0\xC8\x13\xA0\xB8\x0B\xA0\xC8\x01\xA0\xD8\x01\xA0\x98\x03\xA0\xB8\x08\xA0\xA8\x10\xA0\xC8\x01\xA0\xB8\x01\xB9\xA0\xC8\xDA\x01\xA0\xA8\x04\xA0\x98\x05\xA0\xC8\x15\xA0\x98\x03\xA0\xF8\x29\xA0\xA8\x09\xB9\xA0\xF8\x01\xA0\x78\xA0\x98\x06\xB9\xA0\xE8\x02\xB9\xA0\x88\x06\xA0\xC8\x1D\xA0\xA8\x02\xA0\x98\x1D\xB9\xA0\x98\x29\xA0\xA8\x05\xA0\xB8\x01\xA0\xC8\x0A\xA0\xA8\x1F\xA0\xF8\x01\xA0\x98\x10\xBD\xA0\x98\x0F\xA0\xC8\x15\xA0\xD8\x2D\xA0\xB8\x18\xA0\xF8\x02\xA0\x88\x16\xA0\xF8\x01\xA0\xA8\x17\xA0\xF8\x1B\xBD\xA0\x98\x0C\xA0\xA8\x14\xA0\x88\x1E\xB9\xA0\xC8\x15\xA0\xF8\x0B\xA0\xA8\x06\xA0\xC8\x0F\xA0\xD8\x18\xB9\xA0\xE8\x01\xB9\xA0\xA8\x0E\xA0\xD8\x1E\xA0\x88\x09\xA0\xE8\x10\xA0\x98\x0B\xA0\x98\x06\xA0\xE8\x0E\xA0\xA8\x2C\xA0\xD8\x01\xA0\xF8\x1F\xA0\x78\xA0\xE8\x0F\xA0\x98\x01\xA0\x98\x38\xC0\x02\x48\xA0\xC8\x05\xA0\x98\x05\xBB\xA0\x98\x08\xA0\x98\x16\xA0\x88\x0E\xA0\xE8\x19\xA0\xE8\x09\xA0\xA8\x02\xA0\xC8\x04\xA0\x88\x05\xA0\xA8\x04\xA0\xD8\x0D\xC0\x02\x48\xA0\xA8\x03\xA0\xE8\x05\xA0\xC8\x02\xA0\xD8\x05\xA0\xD8\x12\xB9\xA0\xC8\x01\xA0\xE8\x17\xA0\xE8\x09\xA0\xB8\x08\xA0\xD8\x02\xA0\xC8\x05\xC0\x02\x48\xA0\xE8\x0B\xA0\xB8\x0C\xC0\x02\x48\xA0\x88\x02\xC0\x03\x48\xA0\xC8\x33\xC0\x18\x48\xA0\xA8\x03\xA0\xC8\x08\xA0\xE8\x02\xA0\xB8\x04\xA0\xD8\x0D\xBB\xA0\xD8\x07\xA0\x98\x17\xA0\xB8\x1C\xBD\xA0\xC8\x1D\xBD\xA0\xE8\x0E\xA0\xC8\x02\xA0\xC8\x27\xA0\xF8\x0D\xB9\xA0\x98\x14\xA0\x98\x18\xA0\xB8\x01\xA0\xB8\x04\xA0\xE8\x02\xB9\xA0\x98\x20\xC0\x02\x48\xA0\xA8\x0A\xA0\xF8\x13\xA0\xE8\x0B\xA0\xC8\x1A\xA0\x98\x0F\xA0\xB8\x05\xBB\xA0\xF8\x18\xA0\xE8\x10\xA0\xF8\x2B\xC0\x03\x48\xA0\xD8\x0F\xA0\xA8\x0D\xA0\xC8\x0A\xA0\xF8\x07\xA0\xC8\x0A\xA0\xB8\x0A\xA0\xE8\x01\xA0\xC8\x1D\xBD\xA0\xB8\x16\xA0\xD8\x01\xA0\x98\x06\xA0\x88\x1A\xA0\xC8\x80\x03\xB9\xA0\xE8\x48\xBD\xA0\xF8\x22\xA0\xC8\x1B\xA0\x78\xA0\xB8\x01\xA0\x98\x08\xA0\xA8\x21\xB9\xA0\xE8\x0A\xB9\xA0\xC8\x0D\xA0\x88\x29\xA0\xF8\x0F\xA0\xF8\x02\xB9\xA0\xA8\x11\xC0\x03\x48\xA0\xD8\x08\xB9\xA0\xF8\x03\xA0\xB8\x19\xA0\xA8\x0D\xA0\xD8\x01\xA0\x98\x20\xA0\xD8\x2D\xBD\xA0\x88\x02\xA0\xF8\x31\xA0\xB8\x03\xA0\xF8\x20\xB9\xA0\xA8\x29\xA0\xF8\x14\xA0\xA8\x0A\xA0\xE8\x06\xA0\xD8\x12\xB9\xA0\xF8\x01\xA0\xE8\x06\xBB\xA0\x98\x0F\xA0\xA8\x1F\xA0\xF8\x01\xA0\xD8\x1B\xA0\xE8\x19\xA0\xD8\x62\xA0\xC8\x35\xA0\xE8\x1A\xA0\xF8\x1A\xC0\x02\x68\xA0\x88\x21\xA0\xF8\x02\xA0\xE8\x02\xA0\xA8\x01\xA0\xC8\x01\xA0\xF8\x20\xA0\xB8\x1B\xA0\xC8\x12\xA0\xE8\x30\xBD\xA0\xF8\x18\xA0\xF8\x1B\xA0\xD8\x1C\xA0\xA8\x1E\xA0\x98\x36\xA0\x88\x1B\xA0\xB8\x1B\xA0\x98\x1D\xC0\x02\xF8\x1B\xA0\xF8\x39\xA0\xD8\x1A\xA0\x88\x1C\xA0\x88\x01\xA0\x98\x1C\xA0\xF8\x36\xA0\x98\x1C\xA0\xF8\x1B\xA0\x98\x1C\xA0\xF8\x1B\xA0\xA8\x1C\xA0\xE8\x26\xA0\xC8\x02\xA0\xA8\x1A\xA0\x78\xA0\xB8\x07\xA0\xB8\x0B\xA0\xF8\x15\xA0\xB8\x18\xA0\x98\x0A\xA0\xF8\x14\xA0\xE8\x07\xC0\x03\x48\xA0\x98\x34\xA0\xC8\x08\xA0\xE8\x26\xC0\x06\x48\xA0\xE8\xAA\x01\xA0\xC8\x0B\xA0\x88\x54\xA0\xB8\x1A\xB9\xA0\xD8\x06\xB9\xA0\xC8\x02\xA0\xB8\x0B\xA0\x98\x03\xC0\x02\x48\xA0\xB8\x04\xA0\xD8\x16\xC0\x02\x88\x01\xA0\xD8\x13\xA0\xF8\x08\xA0\xF8\x13\xA0\x88\x01\xA0\x98\x33\xB9\xA0\xC8\x14\xA0\x98\x02\xA0\x98\x18\xA0\xE8\x2E\xBB\xA0\x98\x1E\xB9\xA0\xB8\x16\xA0\xC8\x16\xA0\x98\x1A\xA0\x98\x02\xA0\xB8\x1C\xA0\x98\x15\xA0\x88\x01\xA0\x88\x25\xA0\x78\xC0\x02\x48\xA0\xC8\x07\xA0\x88\x01\xA0\x88\x17\xA0\xF8\x1C\xA0\x98\x3C\xA0\xD8\x16\xA0\xA8\x01\xA0\xA8\x1D\xC0\x05\x48\xA0\x98\x15\xA0\x98\x18\xA0\x98\x20\xBD\xA0\xA8\x17\xA0\xE8\x16\xA0\xB8\x01\xA0\x98\x0A\xA0\xC8\x02\xA0\xE8\x1A\xA0\x78\xA0\xF8\x18\xB9\xA0\xC8\x1E\xA0\x88\x02\xB9\xA0\xD8\x1D\xA0\x88\x15\xA0\xB8\x14\xA0\xC8\x31\xA0\xE8\x03\xC0\x02\xE8\x01\xA0\xC8\x06\xA0\xD8\x38\xA0\x88\x15\xA0\xC8\x30\xA0\xD8\x13\xA0\xD8\x17\xA0\x98\x4B\xBD\xA0\x88\x01\xA0\x98\x08\xA0\x78\xC0\x02\x98\x01\xBD\xA0\xB8\x15\xA0\xF8\x14\xA0\xC8\x37\xA0\xA8\x01\xA0\xC8\x01\xA0\xC8\x02\xA0\xF8\x13\xA0\x98\x09\xA0\xA8\x02\xA0\xD8\x1D\xB9\xA0\x88\x01\xA0\xE8\x23\xA0\x98\x02\xA0\xF8\x13\xA0\xB8\x16\xA0\xE8\x02\xA0\xC8\x2E\xB9\xA0\xE8\x05\xA0\x98\x10\xB9\xA0\xB8\x09\xBB\xA0\xE8\x02\xA0\xA8\x01\xA0\xA8\x02\xA0\xC8\x18\xA0\xB8\x0C\xA0\xC8\x18\xA0\x88\x18\xA0\xA8\x3B\xC0\x06\x48\xA0\x88\x2D\xA0\xF8\x07\xA0\xA8\x02\xA0\xA8\x0C\xA0\xB8\x1D\xA0\xE8\x02\xA0\x98\x01\xA0\x88\x02\xA0\xA8\x01\xA0\x78\xA0\x88\x08\xA0\xD8\x04\xBD\xA0\x88\x0C\xA0\xF8\x06\xA0\x98\x75\xC0\x04\x48\xA0\xB8\x3E\xB9\xA0\xA8\x14\xA0\xC8\x16\xA0\xF8\x30\xC0\x03\x48\xA0\x98\x03\xC0\x02\x48\xA0\x88\x27\xA0\xE8\x01\xA0\x98\x01\xA0\x88\x18\xA0\xC8\x01\xB9\xA0\xF8\x01\xA0\x88\x15\xA0\x98\x04\xA0\xD8\x44\xA0\xA8\x02\xA0\xD8\x14\xA0\xE8\x0B\xB9\xA0\xE8\x12\xA0\xB8\x16\xA0\xD8\x15\xA0\xE8\x16\xA0\xF8\x16\xA0\xA8\x2B\xB9\xA0\xF8\x13\xA0\xE8\x16\xA0\xE8\x15\xA0\xA8\x15\xA0\xF8\x02\xA0\x98\x04\xA0\xE8\x19\xA0\xF8\x14\xA0\xF8\x13\xA0\xC8\x2C\xB9\xA0\xB8\x45\xA0\x88\x16\xB9\xA0\xF8\x13\xA0\x88\x1C\xA0\xC8\x15\xA0\xD8\x1C\xA0\xA8\x03\xA0\x88\x27\xA0\x88\x01\xA0\x88\x08\xA0\xD8\x05\xA0\xF8\x13\xA0\xC8\x04\xC0\x02\x48\xA0\xE8\x04\xA0\x88\x01\xA0\xE8\x02\xA0\x78\xA0\x88\x0B\xA0\xC8\x43\xA0\x98\x1E\xA0\x98\x01\xB9\xA0\xA8\x16\xC0\x03\x48\xA0\xE8\x01\xA0\x88\x30\xA0\xF8\x1B\xA0\xD8\x03\xA0\x88\x19\xA0\xE8\x18\xA0\x88\x27\xBD\xA0\xA8\x06\xA0\x88\x16\xA0\xF8\x07\xA0\xF8\x15\xA0\xF8\x13\xA0\xF8\x5A\xB9\xA0\xF8\x02\xC0\x03\x48\xA0\x88\x02\xA0\xD8\x35\xA0\xD8\x16\xA0\xA8\x05\xA0\x98\x17\xB9\xA0\x98\x15\xA0\xA8\x17\xA0\xE8\x1D\xA0\xE8\x15\xA0\xA8\x1B\xA0\xA8\xE4\x01\xC0\x02\x48\xA0\xE8\x01\xC0\x02\x48\xA0\xE8\x01\xC0\x03\x48\xA0\xD8\x15\xA0\xF8\x02\xB9\xA0\xE8\x1B\xA0\x98\x02\xA0\xC8\x01\xA0\xA8\x18\xA0\xF8\x0E\xA0\x98\x21\xA0\xA8\x1E\xA0\xC8\x11\xC0\x02\x48\xA0\xA8\x06\xB9\xA0\x88\x05\xA0\xA8\x0A\xA0\x88\x09\xA0\x88\x01\xA0\xB8\x1F\xB9\xA0\xC8\x03\xA0\xF8\x02\xA0\xE8\x07\xA0\x98\x18\xA0\xF8\x13\xA0\x98\x0B\xC0\x03\x48\xA0\xE8\x01\xA0\xE8\x19\xBD\xA0\x88\x02\xA0\xC8\x1A\xA0\x78\xC0\x04\x48\xA0\xD8\x19\xA0\x88\x02\xB9\xA0\x98\x09\xA0\x88\x30\xB9\xA0\xB8\x05\xA0\xA8\x01\xA0\xB8\x43\xB9\xA0\xF8\x14\xA0\xA8\x2C\xBD\xB9\xA0\xA8\x1D\xA0\xC8\x21\xA0\x88\x5B\xA0\xD8\x27\xA0\xF8\x18\xA0\x98\x14\xA0\xA8\x17\xA0\x88\x1C\xC0\x02\x48\xA0\xC8\x13\xC0\x02\x48\xA0\xC8\x0E\xA0\xC8\x02\xA0\xA8\x0C\xA0\xF8\x02\xB9\xA0\xD8\x1F\xA0\x98\x08\xA0\xE8\x01\xA0\x88\x02\xB9\xA0\xA8\x05\xA0\x78\xA0\xD8\x04\xA0\x88\x12\xA0\xD8\x29\xA0\x98\x0D\xBD\xB9\xA0\xA8\x01\xA0\x98\x16\xA0\xF8\x1F\xA0\xC8\x0D\xA0\x88\x04\xA0\xE8\x0A\xA0\x88\x16\xA0\xC8\x15\xA0\x88\x1B\xA0\xD8\x20\xA0\xB8\x16\xA0\xC8\x01\xA0\x88\x02\xA0\xD8\x02\xA0\xE8\x0C\xA0\x88\x06\xA0\x88\x16\xA0\xA8\x05\xA0\xE8\x17\xA0\xB8\x12\xBD\xA0\xB8\x12\xA0\xF8\x13\xA0\xF8\x05\xA0\xF8\x23\xA0\xF8\x01\xA0\xF8\x1D\xBD\xA0\xF8\x15\xA0\xD8\x1B\xA0\xE8\x19\xA0\xE8\x0F\xA0\xD8\x01\xA0\xD8\x1A\xA0\xC8\x06\xA0\x98\x03\xA0\xC8\x2B\xB9\xA0\x88\x0A\xA0\xD8\x01\xC0\x02\x48\xA0\x98\xD8\x04\xA0\xC8\x0D\xA0\xB8\x1B\xA0\xF8\x04\xA0\xD8\x48\xA0\xB8\x01\xA0\xB8\x1D\xA0\xB8\x01\xA0\xD8\x02\xA0\xE8\x01\xBD\xA0\xD8\x05\xA0\x98\x1F\xA0\xB8\x16\xA0\xC8\x07\xBB\xA0\x98\x08\xA0\xB8\x06\xA0\x98\x07\xA0\xC8\x04\xA0\xF8\x01\xA0\xB8\x05\xC0\x03\x48\xA0\xB8\x0C\xA0\x88\x08\xA0\xC8\x19\xC0\x02\x88\x08\xA0\xA8\x27\xA0\xC8\x12\xC0\x02\x48\xA0\x98\x0D\xC0\x03\x48\xA0\x88\x0B\xA0\x98\x01\xBD\xB9\xA0\x88\x17\xA0\xA8\x04\xA0\xD8\x05\xA0\xE8\x15\xA0\xB8\x0A\xC0\x02\x48\xA0\xE8\x08\xA0\x98\x05\xA0\xE8\x1A\xB9\xA0\xE8\x21\xA0\xE8\x01\xA0\x88\x01\xA0\xB8\x01\xA0\xF8\x0F\xA0\xD8\x17\xA0\xF8\x04\xA0\xF8\x19\xA0\xB8\xA2\x01\xC0\x03\x48\xA0\xA8\x14\xA0\xF8\x12\xA0\xA8\x17\xA0\xB8\x26\xBD\xA0\xB8\x01\xA0\x88\x42\xA0\x88\x16\xB9\xA0\xA8\x06\xA0\xB8\x0E\xA0\xC8\x19\xB9\xA0\xC8\x07\xA0\x98\x2E\xC0\x06\x48\xA0\x98\x0D\xA0\xF8\x02\xA0\xF8\x0B\xA0\x88\x0C\xBD\xA0\xA8\x6D\xA0\x88\x2D\xA0\xB8\x13\xC0\x03\x48\xA0\xF8\x10\xA0\x98\x3B\xC0\x04\x48\xA0\xA8\x2D\xB9\xA0\xD8\x29\xA0\xB8\x01\xA0\xD8\x07\xA0\xF8\x28\xA0\xC8\x0A\xB9\xA0\xA8\x2B\xA0\xC8\x0B\xA0\xC8\x08\xA0\xF8\x1E\xA0\xD8\x17\xA0\xB8\x03\xA0\xC8\x02\xA0\xE8\x0B\xA0\xA8\x02\xA0\x98\x17\xA0\xF8\x15\xA0\xF8\x2A\xB9\xA0\xF8\x17\xA0\x88\x04\xA0\xA8\x04\xA0\x98\x0A\xA0\xF8\x2E\xA0\xC8\x03\xA0\x98\x01\xA0\x88\x01\xA0\xE8\x06\xA0\x98\x04\xA0\x88\x28\xB9\xA0\x88\x05\xA0\xD8\x2D\xA0\xD8\x08\xA0\xD8\x0E\xA0\xD8\x03\xA0\x88\x02\xA0\xA8\x01\xA0\xB8\x01\xA0\x88\x17\xA0\x88\x12\xB9\xA0\xA8\x01\xA0\xE8\x14\xA0\xC8\x01\xA0\x98\x0A\xA0\x88\x01\xA0\xB8\x18\xA0\xD8\x07\xA0\xF8\x0A\xBD\xA0\xA8\x10\xB9\xA0\xA8\x1C\xC0\x0A\x48\xA0\xA8\x07\xA0\xA8\x0B\xA0\xA8\x03\xA0\xF8\x02\xBB\xA0\xC8\x16\xB9\xA0\xA8\x03\xA0\xC8\x02\xA0\xB8\x50\xA0\xD8\x17\xA0\xD8\x19\xA0\xC8\x18\xB9\xA0\xA8\x02\xA0\xD8\x19\xA0\xC8\x03\xB9\xA0\x88\x02\xA0\x98\x0B\xA0\x98\x02\xA0\xE8\x19\xA0\xA8\x1C\xA0\xA8\x05\xA0\xA8\x03\xA0\x98\x03\xB9\xA0\xB8\x01\xA0\x98\x06\xA0\xF8\x14\xA0\xC8\x23\xB9\xA0\xC8\x6F\xC0\x04\x48\xA0\xC8\x06\xA0\xE8\x01\xA0\xA8\x18\xA0\x98\x02\xA0\xB8\x06\xA0\xD8\x21\xA0\x78\xA0\xC8\x01\xA0\xC8\x0F\xA0\xB8\x30\xB9\xA0\xC8\x0D\xA0\xA8\x07\xC0\x02\x48\xA0\xC8\x42\xA0\x98\x06\xA0\x98\x14\xA0\xB8\x08\xB9\xA0\xE8\x02\xC0\x03\x48\xA0\xA8\x34\xA0\xC8\x04\xA0\xA8\x0E\xA0\xA8\x56\xA0\xE8\x01\xA0\xC8\x30\xA0\xC8\x03\xC0\x02\x48\xA0\xF8\x08\xA0\xF8\x04\xA0\xA8\x0C\xA0\xE8\x02\xA0\x88\x05\xB9\xA0\xA8\x02\xB9\xA0\xA8\x01\xB9\xA0\xD8\x0A\xA0\x88\x09\xA0\xF8\x05\xA0\xF8\x0B\xA0\xC8\x04\xA0\xC8\x03\xA0\xA8\x11\xB9\xA0\xB8\x03\xA0\xF8\x05\xA0\x98\x02\xA0\x88\x01\xB9\xA0\xD8\x07\xA0\xF8\x05\xB9\xA0\xF8\x20\xA0\xC8\x02\xB9\xA0\xC8\x09\xA0\xD8\x09\xA0\x88\x04\xA0\x98\x03\xA0\xD8\x08\xA0\x88\x04\xA0\xF8\x08\xA0\x98\x01\xA0\xA8\x02\xA0\x88\x0F\xBD\xA0\x88\x05\xA0\xB8\x05\xA0\xF8\x06\xA0\xF8\x0C\xA0\xF8\x11\xA0\xE8\x05\xA0\xF8\x01\xA0\x98\x17\xA0\xC8\x20\xA0\xF8\x43\xA0\x98\x16\xA0\x78\xB9\xBD\xA0\x88\x02\xA0\x88\x05\xA0\xC8\x11\xA0\xA8\x31\xB9\xA0\xD8\x01\xA0\xA8\x03\xA0\xF8\x01\xA0\xA8\x1F\xB9\xA0\xA8\x05\xA0\x88\x01\xA0\x98\x0B\xA0\xD8\x01\xA0\xA8\x03\xA0\xA8\x28\xA0\xC8\x02\xA0\x88\x24\xA0\x88\x03\xA0\xE8\x27\xA0\x88\x26\xA0\xC8\x22\xA0\xA8\x03\xA0\xD8\x14\xA0\xF8\x25\xB9\xA0\x98\x18\xA0\x88\x24\xA0\xF8\x01\xA0\xB8\x28\xA0\xE8\x15\xB9\xA0\x88\x0E\xA0\xB8\x3A\xA0\xF8\x01\xB9\xA0\xD8\x1D\xBD\xA0\xE8\x15\xA0\x98\x01\xA0\xB8\x2E\xA0\xB8\x18\xA0\x78\xB9\xA0\x88\x06\xA0\xD8\x1C\xA0\x98\x1F\xBD\xA0\x98\x1E\xBD\xA0\xF8\x07\xB9\xA0\x88\x0E\xA0\x98\x01\xA0\xF8\x25\xA0\x98\x23\xA0\xC8\x20\xC0\x02\x48\xA0\xD8\x1F\xA0\x88\x02\xA0\xF8\x13\xA0\x98\x15\xA0\x88\x08\xA0\x98\x0B\xA0\xD8\x03\xC0\x02\x48\xA0\xA8\x05\xA0\xB8\x10\xA0\xD8\x14\xA0\xB8\x14\xA0\xC8\x09\xA0\xC8\x02\xB9\xA0\xE8\x88\x02\xA0\x88\x10\xA0\x88\x23\xC0\x0F\x48\xA0\xD8\x8B\x1B\xA0\xF8\x01\xA0\xE8\x07\xA0\xA8\x02\xA0\xD8\x08\xA0\x88\x01\xA0\x78\xA0\xA8\x01\xA0\xA8\x15\xA0\xC8\x03\xA0\xE8\xFB\x01\xA0\xF8\x06\xA0\xF8\x02\xC0\x02\xC8\x02\xA0\xC8\x01\xA0\xC8\x03\xA0\xA8\x07\xA0\x98\x1C\xC0\x02\x48\xA0\x98\x01\xB9\xBB\xB9\xA0\xC8\x07\x90\x40\x5F\x5F\x5A\x54\x49\x50\x4B\x63')
        sym_name = ffi.new("unsigned char[]", '\x5F\x5F\x5A\x54\x49\x50\x4B\x63')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_uleb_with_op_mask(self):
        sym = ffi.new("unsigned char[]", '\x80\x90\x49\xC0\x02\xD8\x04\xA0\xB8\x06\x90\x40\x5F\x5F\x5A\x54\x68\x6E')
        sym_name = ffi.new("unsigned char[]", '\x5F\x5F\x5A\x54\x68\x6E')
        
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

    def test_0x70(self):
        sym = ffi.new("unsigned char[]", '\x72\xC0\x1E\x1C\x40\x5F\x5F\x5A\x4E')
        sym_name = ffi.new("unsigned char[]", '\x5F\x5F\x5A\x4E')
        module.get_sym_name(sym)
        self.assertEqual(ffi.string(sym), ffi.string(sym_name))

class get_is_64(unittest.TestCase):
    def test_7(self):
        val = ffi.cast("uint8_t", 7)
        bit = ffi.cast("uint8_t", 1)
        self.assertEqual(module.get_is_64(val), bit)

    def test_1(self):
        val = ffi.cast("uint8_t", 1)
        bit = ffi.cast("uint8_t", 0)
        self.assertEqual(module.get_is_64(val), bit)

class bitflip(unittest.TestCase):
    def test_7(self):
        val = ffi.cast("uint32_t", 117440512)
        bit = ffi.cast("uint32_t", 7)
        self.assertEqual(module.bitflip(val), bit)

class parse_magic(unittest.TestCase):
    def test_cafebabe(self):
        cafebabe = ffi.new("uint32_t*", 3405691582)
        ret_val = ffi.cast("uint8_t", 4)
        self.assertEqual(module.parse_magic(cafebabe), ret_val)

    def test_bebafeca(self):
        bebafeca = ffi.new("uint32_t*", 3199925962)
        ret_val = ffi.cast("uint8_t", 4)
        self.assertEqual(module.parse_magic(bebafeca), ret_val)

    def test_cffaedfe(self):
        cffaedfe = ffi.new("uint32_t*", 3489328638)
        ret_val = ffi.cast("uint8_t", 3)
        self.assertEqual(module.parse_magic(cffaedfe), ret_val)

    def test_feedfacf(self):
        cffaedfe = ffi.new("uint32_t*", 4277009103)
        ret_val = ffi.cast("uint8_t", 2)
        self.assertEqual(module.parse_magic(cffaedfe), ret_val)

module = load('binddump')

suite = unittest.TestLoader().loadTestsFromTestCase(mask_opcode)
unittest.TextTestRunner(verbosity=2).run(suite)

suite = unittest.TestLoader().loadTestsFromTestCase(get_sym_name)
unittest.TextTestRunner(verbosity=2).run(suite)

suite = unittest.TestLoader().loadTestsFromTestCase(get_is_64)
unittest.TextTestRunner(verbosity=2).run(suite)

suite = unittest.TestLoader().loadTestsFromTestCase(bitflip)
unittest.TextTestRunner(verbosity=2).run(suite)

suite = unittest.TestLoader().loadTestsFromTestCase(parse_magic)
unittest.TextTestRunner(verbosity=2).run(suite)

suite = unittest.TestLoader().loadTestsFromTestCase(get_dyld_index)
unittest.TextTestRunner(verbosity=2).run(suite)
